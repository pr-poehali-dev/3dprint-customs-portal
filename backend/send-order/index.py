'''
Business: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ 3D –ø–µ—á–∞—Ç—å –Ω–∞ email —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
Args: event - dict with httpMethod, body (JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã)
      context - object with attributes: request_id, function_name
Returns: HTTP response —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
'''

import json
import smtplib
import os
import base64
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body_data = json.loads(event.get('body', '{}'))
    
    order_number = f"3DP-{datetime.now().strftime('%Y%m%d')}-{context.request_id[:8].upper()}"
    
    email_body = f"""
    <html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <h2 style="color: #2563eb;">–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_number}</h2>
        
        <h3>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏:</h3>
        <ul>
            <li><strong>–†–∞–∑–º–µ—Ä—ã:</strong> {body_data.get('length')} x {body_data.get('width')} x {body_data.get('height')} –º–º</li>
            <li><strong>–ú–∞—Ç–µ—Ä–∏–∞–ª:</strong> {body_data.get('plastic')}</li>
            <li><strong>–¶–≤–µ—Ç:</strong> {body_data.get('color')}</li>
            <li><strong>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:</strong> {body_data.get('infill')}%</li>
            <li><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> {body_data.get('quantity')} —à—Ç</li>
        </ul>
        
        <h3>–¢–∏–ø –∑–∞–∫–∞–∑—á–∏–∫–∞:</h3>
        <p><strong>{body_data.get('customerType')}</strong></p>
        {'<p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ' + body_data.get('companyName', '') + '</p>' if body_data.get('customerType') == 'legal' else ''}
        {'<p><strong>–ò–ù–ù:</strong> ' + body_data.get('inn', '') + '</p>' if body_data.get('customerType') == 'legal' else ''}
        
        <h3>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</h3>
        <ul>
            <li><strong>Email:</strong> {body_data.get('email')}</li>
            <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {body_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</li>
        </ul>
        
        {'<h3>–§–∞–π–ª –º–æ–¥–µ–ª–∏:</h3><p>‚úÖ –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: <strong>' + body_data.get('fileName', '') + '</strong></p>' if body_data.get('fileName') else '<p>‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω</p>'}
        
        <h3>–û–ø–∏—Å–∞–Ω–∏–µ:</h3>
        <p>{body_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
        
        <hr style="margin: 20px 0;">
        <p style="color: #666; font-size: 12px;">–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
    </body>
    </html>
    """
    
    smtp_server = os.environ.get('SMTP_SERVER', 'mail.3dprintcustom.ru')
    smtp_port = 587
    smtp_user_short = os.environ.get('SMTP_USER_SHORT', 'zakaz')
    smtp_user = smtp_user_short if '@' in smtp_user_short else f'{smtp_user_short}@3dprintcustom.ru'
    smtp_password = os.environ.get('SMTP_PASSWORD', '')
    
    print(f"=== SMTP DEBUG ===")
    print(f"Server: {smtp_server}")
    print(f"Port: {smtp_port}")
    print(f"User (original): {smtp_user_short}")
    print(f"User (final): {smtp_user}")
    print(f"Password length: {len(smtp_password) if smtp_password else 0}")
    print(f"Password FULL: {smtp_password}")
    print(f"====================")
    
    if not smtp_user or not smtp_password:
        print("‚ö†Ô∏è SMTP not configured - saving order data only")
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': True,
                'orderNumber': order_number,
                'message': 'Order saved. Email configuration required.',
                'orderData': {
                    'dimensions': f"{body_data.get('length')}x{body_data.get('width')}x{body_data.get('height')}",
                    'plastic': body_data.get('plastic'),
                    'color': body_data.get('color'),
                    'email': body_data.get('email'),
                    'phone': body_data.get('phone')
                }
            })
        }
    
    msg_company = MIMEMultipart()
    msg_company['Subject'] = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ 3D –ø–µ—á–∞—Ç—å ‚Ññ{order_number}'
    msg_company['From'] = smtp_user
    msg_company['To'] = 'zakaz@3dprintcustom.ru'
    msg_company.attach(MIMEText(email_body, 'html', 'utf-8'))
    
    file_base64 = body_data.get('fileBase64', '')
    file_name = body_data.get('fileName', '')
    
    if file_base64 and file_name:
        file_data = base64.b64decode(file_base64)
        
        part = MIMEBase('application', 'octet-stream')
        part.set_payload(file_data)
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', f'attachment; filename={file_name}')
        msg_company.attach(part)
    
    client_email_body = f"""
    <html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <h2 style="color: #2563eb;">–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!</h2>
        <p>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞.</p>
        
        <div style="background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0;">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <span style="color: #2563eb;">{order_number}</span></h3>
        </div>
        
        <h3>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</h3>
        <ul>
            <li><strong>–†–∞–∑–º–µ—Ä—ã:</strong> {body_data.get('length')} x {body_data.get('width')} x {body_data.get('height')} –º–º</li>
            <li><strong>–ú–∞—Ç–µ—Ä–∏–∞–ª:</strong> {body_data.get('plastic')}</li>
            <li><strong>–¶–≤–µ—Ç:</strong> {body_data.get('color')}</li>
            <li><strong>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:</strong> {body_data.get('infill')}%</li>
            <li><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> {body_data.get('quantity')} —à—Ç</li>
        </ul>
        
        {'<h3>–û–ø–∏—Å–∞–Ω–∏–µ:</h3><p>' + body_data.get('description', '') + '</p>' if body_data.get('description') else ''}
        
        <div style="background: #ecfdf5; border-left: 4px solid #10b981; padding: 15px; margin: 20px 0;">
            <p style="margin: 0;"><strong>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</strong> –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.</p>
        </div>
        
        <hr style="margin: 30px 0;">
        
        <p style="color: #666;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ 3D Print Custom</p>
        <p style="color: #666; font-size: 14px;">
            üìß zakaz@3dprintcustom.ru<br>
            üìç –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–æ–±–∞–Ω–æ–≤—Å–∫–∏–π –õ–µ—Å, –¥–æ–º 11 (–º. –ü—Ä–æ–∫—à–∏–Ω–æ)
        </p>
        
        <p style="color: #999; font-size: 12px; margin-top: 30px;">–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
    </body>
    </html>
    """
    
    msg_client = MIMEMultipart('alternative')
    msg_client['Subject'] = f'–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ 3D –ø–µ—á–∞—Ç—å ‚Ññ{order_number}'
    msg_client['From'] = smtp_user
    msg_client['To'] = body_data.get('email')
    msg_client.attach(MIMEText(client_email_body, 'html', 'utf-8'))
    
    ports_to_try = [587, 465, 25]
    last_error = None
    
    for port in ports_to_try:
        try:
            print(f"Trying SMTP: {smtp_server}:{port}")
            
            if port == 465:
                print("Using SSL connection (port 465)")
                with smtplib.SMTP_SSL(smtp_server, port) as server:
                    print("Logging in...")
                    server.login(smtp_user, smtp_password)
                    print("Sending emails...")
                    server.send_message(msg_company)
                    server.send_message(msg_client)
                    print(f"‚úÖ Success with port {port}!")
                    break
            else:
                print(f"Using STARTTLS connection (port {port})")
                with smtplib.SMTP(smtp_server, port, timeout=10) as server:
                    server.starttls()
                    print("Logging in...")
                    server.login(smtp_user, smtp_password)
                    print("Sending emails...")
                    server.send_message(msg_company)
                    server.send_message(msg_client)
                    print(f"‚úÖ Success with port {port}!")
                    break
        except (smtplib.SMTPException, OSError) as e:
            last_error = e
            print(f"‚ùå Port {port} failed: {type(e).__name__}: {str(e)}")
            continue
    else:
        print(f"All ports failed. Last error: {last_error}")
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'success': True,
                'orderNumber': order_number,
                'message': f'Demo mode: All SMTP ports failed'
            })
        }
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'isBase64Encoded': False,
        'body': json.dumps({
            'success': True,
            'orderNumber': order_number
        })
    }